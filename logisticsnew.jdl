entity Vendor {
	name String required,
	pincode String required
}

entity RegionType {
	name String,
	priority Long,    
}

entity CourierChannel {
	name String
}

entity CourierGroup {
	name String
}

entity Warehouse {
	name String required,
	pincode String required
}
entity Courier{
	name String required,
	active Boolean required,
	trackingParameter String,
    trackingUrl String,
    parentCourierId Long
}
entity Pincode {
    pincode String required,
	region String,
	locality String,
    lastMileCost Double,
    tier String
}
entity CourierPricingEngine {
	firstBaseWt Double required,
	firstBaseCost Double required,
    secondBaseWt Double,
    secondBaseCost Double,
    additionalWt Double required,
    additionalCost Double required,
    fuelSurcharge Double,
    minCodCharges Double,
    codCutoffAmount Double,
    variableCodCharges Double,
    validUpto LocalDate
}
// new entity
entity Product {
    name String required,
	isServiceable Boolean
}

// new entity
entity ProductSourceDestinationMapping {
}
// new entity
entity SourceDestinationMapping {
    sourcePincode String required,
	destinationPincode String required
    
}

// new entity
entity CourierAttributes {
    prepaidAir Boolean required,
	prepaidGround Boolean required,
    codAir Boolean required,
    codGround Boolean required,
	reverseAir Boolean required,
    reverseGround Boolean required,
	cardOnDeliveryAir Boolean required,
    cardOnDeliveryGround Boolean required    
}

// new entity
entity VendorWHCourierMapping {
    active Boolean required
}
entity AwbStatus {
	awbStatus String
}
entity Awb {
	awbNumber String required,
    awbBarCode String required,
    cod Boolean required,
    createDate LocalDate required,
    returnAwbNumber String,
    returnAwbBarCode String,
    isBrightAwb Boolean required,
}
entity City {
	name String required
}

entity Country {
	name String required,
	countryCode String required
}
entity State {
	name String required,
	identifier String,
    unionTerritory Boolean required
    
}
entity Zone {
	name String required
    
}
entity Hub {
	name String required,
	address String,
    country String    
}

entity PincodeCourierMapping {
    routingCode String,
    applicableForCheapestCourier Boolean required,
    estimatedDeliveryDays Double,
    pickupAvailable Boolean required
}

entity PincodeRegionZone {
}

relationship ManyToMany {
	Courier{courierChannel(name)} to CourierChannel{courier(name)},
    Courier{courierGroup(name)} to CourierGroup{courier(name)}
}
relationship OneToMany {
  //new relationship
	Vendor{vendorWHCourierMapping} to VendorWHCourierMapping{vendor(name)},
	//Vendor{vendorWHCourierMapping} to VendorWHCourierMapping{pincode(pincode)},
	//new relationship
	Warehouse{vendorWHCourierMapping} to VendorWHCourierMapping{warehouse(name)},
	//Warehouse{vendorWHCourierMapping} to VendorWHCourierMapping{pincode(pincode)},
	//new relationship
	CourierChannel{vendorWHCourierMapping} to VendorWHCourierMapping{courierChannel(name)}
}

relationship ManyToOne {
    SourceDestinationMapping{product(name)} to Product,
    CourierPricingEngine{courier(name)} to Courier,
    CourierPricingEngine{warehouse(name)} to Warehouse,
    CourierPricingEngine{regionType(name)} to RegionType,
    Pincode{city(name)} to City,
    Pincode{state(name)} to State,
    Pincode{zone(name)} to Zone,
    Pincode{hub(name)} to Hub{pinCode},
    PincodeCourierMapping{pincode} to Pincode,
	//new relationship
	PincodeCourierMapping{attributes} to CourierAttributes,
	//PincodeCourierMapping{productGroup(name)} to ProductGroup,
	PincodeCourierMapping{vendorWHCourierMapping} to VendorWHCourierMapping,
	PincodeCourierMapping{sourceDestinationMapping} to SourceDestinationMapping,
    PincodeRegionZone{regionType(name)} to RegionType,
    PincodeRegionZone{courierGroup(name)} to CourierGroup,
    PincodeRegionZone{vendorWHCourierMapping} to VendorWHCourierMapping
}

// Set pagination options
paginate Courier with pagination

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
// Set an angular suffix
//angularSuffix * with mySuffix
